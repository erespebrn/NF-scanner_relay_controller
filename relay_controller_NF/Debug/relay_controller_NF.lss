
relay_controller_NF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800102  00800102  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c6  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a22  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b68  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc0  00000000  00000000  00003579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  a6:	21 9a       	sbi	0x04, 1	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
  a8:	25 b1       	in	r18, 0x05	; 5
  aa:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
  ac:	35 b1       	in	r19, 0x05	; 5
  ae:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
  b0:	4f b7       	in	r20, 0x3f	; 63
  cli();  
  b2:	f8 94       	cli

  while (datlen--) {
  b4:	61 15       	cp	r22, r1
  b6:	71 05       	cpc	r23, r1
  b8:	b1 f0       	breq	.+44     	; 0xe6 <loop301+0x22>
  ba:	fc 01       	movw	r30, r24
  bc:	68 0f       	add	r22, r24
  be:	79 1f       	adc	r23, r25
    curbyte=*data++;
  c0:	91 91       	ld	r25, Z+
    
    asm volatile(
  c2:	88 e0       	ldi	r24, 0x08	; 8

000000c4 <loop301>:
  c4:	35 b9       	out	0x05, r19	; 5
  c6:	00 00       	nop
  c8:	00 c0       	rjmp	.+0      	; 0xca <loop301+0x6>
  ca:	97 ff       	sbrs	r25, 7
  cc:	25 b9       	out	0x05, r18	; 5
  ce:	99 0f       	add	r25, r25
  d0:	00 00       	nop
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <loop301+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <loop301+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <loop301+0x14>
  d8:	25 b9       	out	0x05, r18	; 5
  da:	00 c0       	rjmp	.+0      	; 0xdc <loop301+0x18>
  dc:	8a 95       	dec	r24
  de:	91 f7       	brne	.-28     	; 0xc4 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  e0:	e6 17       	cp	r30, r22
  e2:	f7 07       	cpc	r31, r23
  e4:	69 f7       	brne	.-38     	; 0xc0 <ws2812_sendarray+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  e6:	4f bf       	out	0x3f, r20	; 63
  e8:	08 95       	ret

000000ea <USART0_init>:
    }
}

void USART0_init()
{
	UBRR0L = (unsigned char)baudPsc;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (unsigned char)(baudPsc>>8);
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
  f6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	
	UCSR0B |= (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);
  fa:	e1 ec       	ldi	r30, 0xC1	; 193
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 69       	ori	r24, 0x98	; 152
 102:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 104:	e2 ec       	ldi	r30, 0xC2	; 194
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <main>:

}

int main(void)
{
	DDRD = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 114:	1b b8       	out	0x0b, r1	; 11
	
	USART0_init();
 116:	0e 94 75 00 	call	0xea	; 0xea <USART0_init>
	sei();
 11a:	78 94       	sei

	off();
 11c:	0e 94 76 01 	call	0x2ec	; 0x2ec <off>
	
	green();
 120:	0e 94 db 01 	call	0x3b6	; 0x3b6 <green>
	
    while (1) 
    {
		f_sa_on		? (PORTD |= (1<<PORTD2)) : (PORTD &= ~(1<<PORTD2));
 124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <f_sa_on>
 128:	88 23       	and	r24, r24
 12a:	11 f0       	breq	.+4      	; 0x130 <main+0x20>
 12c:	5a 9a       	sbi	0x0b, 2	; 11
 12e:	01 c0       	rjmp	.+2      	; 0x132 <main+0x22>
 130:	5a 98       	cbi	0x0b, 2	; 11
		f_vna_on	? (PORTD |= (1<<PORTD3)) : (PORTD &= ~(1<<PORTD3));
 132:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <f_vna_on>
 136:	88 23       	and	r24, r24
 138:	11 f0       	breq	.+4      	; 0x13e <main+0x2e>
 13a:	5b 9a       	sbi	0x0b, 3	; 11
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0x30>
 13e:	5b 98       	cbi	0x0b, 3	; 11
		f_robot_on	? (PORTD |= (1<<PORTD4)) : (PORTD &= ~(1<<PORTD4));
 140:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <f_robot_on>
 144:	88 23       	and	r24, r24
 146:	11 f0       	breq	.+4      	; 0x14c <main+0x3c>
 148:	5c 9a       	sbi	0x0b, 4	; 11
 14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x3e>
 14c:	5c 98       	cbi	0x0b, 4	; 11
		f_aux_on	? (PORTD |= (1<<PORTD5)) : (PORTD &= ~(1<<PORTD5));
 14e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <f_aux_on>
 152:	88 23       	and	r24, r24
 154:	11 f0       	breq	.+4      	; 0x15a <main+0x4a>
 156:	5d 9a       	sbi	0x0b, 5	; 11
 158:	01 c0       	rjmp	.+2      	; 0x15c <main+0x4c>
 15a:	5d 98       	cbi	0x0b, 5	; 11
		f_eut_on	? (PORTD |= (1<<PORTD6)) : (PORTD &= ~(1<<PORTD6));
 15c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <f_eut_on>
 160:	88 23       	and	r24, r24
 162:	11 f0       	breq	.+4      	; 0x168 <main+0x58>
 164:	5e 9a       	sbi	0x0b, 6	; 11
 166:	01 c0       	rjmp	.+2      	; 0x16a <main+0x5a>
 168:	5e 98       	cbi	0x0b, 6	; 11
		
		if(shut_down_all_on){
 16a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <shut_down_all_on>
 16e:	88 23       	and	r24, r24
 170:	89 f0       	breq	.+34     	; 0x194 <main+0x84>
			PORTD &= ~(1<<PORTD2);
 172:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
 174:	5b 98       	cbi	0x0b, 3	; 11
			PORTD &= ~(1<<PORTD4);
 176:	5c 98       	cbi	0x0b, 4	; 11
			PORTD &= ~(1<<PORTD5);
 178:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1<<PORTD6);
 17a:	5e 98       	cbi	0x0b, 6	; 11
			shut_down_all_on = 0;
 17c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <shut_down_all_on>
			f_sa_on = 0;
 180:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <f_sa_on>
			f_vna_on = 0;
 184:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <f_vna_on>
			f_robot_on = 0;
 188:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <f_robot_on>
			f_aux_on = 0;
 18c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <f_aux_on>
			f_eut_on = 0;
 190:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <f_eut_on>
		}
		if(shut_down_wo_rs_on){
 194:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 198:	88 23       	and	r24, r24
 19a:	59 f0       	breq	.+22     	; 0x1b2 <main+0xa2>
			PORTD &= ~(1<<PORTD4);
 19c:	5c 98       	cbi	0x0b, 4	; 11
			PORTD &= ~(1<<PORTD5);
 19e:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1<<PORTD6);
 1a0:	5e 98       	cbi	0x0b, 6	; 11
			shut_down_wo_rs_on = 0;
 1a2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			f_robot_on = 0;
 1a6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <f_robot_on>
			f_aux_on = 0;
 1aa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <f_aux_on>
			f_eut_on = 0;
 1ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <f_eut_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	89 ef       	ldi	r24, 0xF9	; 249
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xa8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xb2>
 1c2:	00 00       	nop
 1c4:	af cf       	rjmp	.-162    	; 0x124 <main+0x14>

000001c6 <USART0_write>:
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
}

void USART0_write(uint8_t ch)
{
	while(!(UCSR0A & (1<<UDRE0))){};
 1c6:	e0 ec       	ldi	r30, 0xC0	; 192
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	90 81       	ld	r25, Z
 1cc:	95 ff       	sbrs	r25, 5
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <USART0_write+0x4>
	UDR0 = ch;
 1d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1d4:	08 95       	ret

000001d6 <__vector_18>:
volatile uint8_t f_eut_on = 0;
volatile uint8_t shut_down_all_on = 0;
volatile uint8_t shut_down_wo_rs_on = 0;

ISR(USART_RX_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	uint8_t rx_Val = UDR0;
 1f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	if(rx_Val == SA){
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	41 f4       	brne	.+16     	; 0x210 <__vector_18+0x3a>
		f_sa_on = !f_sa_on;
 200:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <f_sa_on>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	91 11       	cpse	r25, r1
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <f_sa_on>
 20e:	49 c0       	rjmp	.+146    	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == VNA){
 210:	8b 30       	cpi	r24, 0x0B	; 11
 212:	41 f4       	brne	.+16     	; 0x224 <__vector_18+0x4e>
		f_vna_on = !f_vna_on;
 214:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <f_vna_on>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	91 11       	cpse	r25, r1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <f_vna_on>
 222:	3f c0       	rjmp	.+126    	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == ROBOT){
 224:	8c 30       	cpi	r24, 0x0C	; 12
 226:	41 f4       	brne	.+16     	; 0x238 <__vector_18+0x62>
		f_robot_on = !f_robot_on;
 228:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <f_robot_on>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	91 11       	cpse	r25, r1
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <f_robot_on>
 236:	35 c0       	rjmp	.+106    	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == AUX){
 238:	8d 30       	cpi	r24, 0x0D	; 13
 23a:	41 f4       	brne	.+16     	; 0x24c <__vector_18+0x76>
		f_aux_on = !f_aux_on;
 23c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <f_aux_on>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	91 11       	cpse	r25, r1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <f_aux_on>
 24a:	2b c0       	rjmp	.+86     	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == EUT){
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	41 f4       	brne	.+16     	; 0x260 <__vector_18+0x8a>
		f_eut_on = !f_eut_on;
 250:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <f_eut_on>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	91 11       	cpse	r25, r1
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <f_eut_on>
 25e:	21 c0       	rjmp	.+66     	; 0x2a2 <__vector_18+0xcc>
    }else if(rx_Val == SHUT_DOWN_ALL){
 260:	8e 31       	cpi	r24, 0x1E	; 30
 262:	21 f4       	brne	.+8      	; 0x26c <__vector_18+0x96>
		shut_down_all_on = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <shut_down_all_on>
 26a:	1b c0       	rjmp	.+54     	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == SHUT_DOWN_WO_RS){
 26c:	8f 31       	cpi	r24, 0x1F	; 31
 26e:	21 f4       	brne	.+8      	; 0x278 <__vector_18+0xa2>
		shut_down_wo_rs_on = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 276:	15 c0       	rjmp	.+42     	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == STATUS){
 278:	84 31       	cpi	r24, 0x14	; 20
 27a:	99 f0       	breq	.+38     	; 0x2a2 <__vector_18+0xcc>

	}else if(rx_Val == LED_RED){
 27c:	82 33       	cpi	r24, 0x32	; 50
 27e:	19 f4       	brne	.+6      	; 0x286 <__vector_18+0xb0>
		red();
 280:	0e 94 b3 01 	call	0x366	; 0x366 <red>
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == LED_YELLOW){
 286:	83 33       	cpi	r24, 0x33	; 51
 288:	19 f4       	brne	.+6      	; 0x290 <__vector_18+0xba>
		yellow();
 28a:	0e 94 8a 01 	call	0x314	; 0x314 <yellow>
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == LED_GREEN){
 290:	84 33       	cpi	r24, 0x34	; 52
 292:	19 f4       	brne	.+6      	; 0x29a <__vector_18+0xc4>
		green();
 294:	0e 94 db 01 	call	0x3b6	; 0x3b6 <green>
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <__vector_18+0xcc>
	}else if(rx_Val == LED_OFF){
 29a:	8c 33       	cpi	r24, 0x3C	; 60
 29c:	11 f4       	brne	.+4      	; 0x2a2 <__vector_18+0xcc>
		off();
 29e:	0e 94 76 01 	call	0x2ec	; 0x2ec <off>
	}
	uint8_t stat = f_sa_on + 2*f_vna_on + 4*f_robot_on + 8*f_aux_on + 16*f_eut_on;
 2a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <f_eut_on>
 2a6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <f_aux_on>
 2aa:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <f_robot_on>
 2ae:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <f_vna_on>
 2b2:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <f_sa_on>
	USART0_write(stat);
 2b6:	88 0f       	add	r24, r24
 2b8:	83 0f       	add	r24, r19
 2ba:	88 0f       	add	r24, r24
 2bc:	82 0f       	add	r24, r18
 2be:	88 0f       	add	r24, r24
 2c0:	89 0f       	add	r24, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	84 0f       	add	r24, r20
 2c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <USART0_write>

}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <off>:
void house_light()
{
	colors[0].r=050; colors[0].g=050; colors[0].b=050;
	for (int i=0; i<MAXPIX; i++)
		ws2812_sendarray((uint8_t *)&colors[0],3);
}
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	e9 e0       	ldi	r30, 0x09	; 9
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	11 82       	std	Z+1, r1	; 0x01
 2f6:	10 82       	st	Z, r1
 2f8:	12 82       	std	Z+2, r1	; 0x02
 2fa:	c9 e0       	ldi	r28, 0x09	; 9
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	89 e0       	ldi	r24, 0x09	; 9
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_sendarray>
 30a:	21 97       	sbiw	r28, 0x01	; 1
 30c:	c1 f7       	brne	.-16     	; 0x2fe <off+0x12>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <yellow>:

void yellow()
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
	colors[0].r=255; colors[0].g=100; colors[0].b=000;
 318:	e9 e0       	ldi	r30, 0x09	; 9
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	81 83       	std	Z+1, r24	; 0x01
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	80 83       	st	Z, r24
 324:	12 82       	std	Z+2, r1	; 0x02
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 326:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
}

void yellow()
{
	colors[0].r=255; colors[0].g=100; colors[0].b=000;
	for(int y=0; y<8; y++)
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	14 c0       	rjmp	.+40     	; 0x358 <yellow+0x44>
	{
		for (i=0; i<y; i++)
 330:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
 334:	1c 16       	cp	r1, r28
 336:	1d 06       	cpc	r1, r29
 338:	7c f4       	brge	.+30     	; 0x358 <yellow+0x44>
			ws2812_sendarray((uint8_t *)&colors[0],3);		
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_sendarray>
void yellow()
{
	colors[0].r=255; colors[0].g=100; colors[0].b=000;
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 346:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <i>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <i>
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	8c 17       	cp	r24, r28
 354:	9d 07       	cpc	r25, r29
 356:	8c f3       	brlt	.-30     	; 0x33a <yellow+0x26>
}

void yellow()
{
	colors[0].r=255; colors[0].g=100; colors[0].b=000;
	for(int y=0; y<8; y++)
 358:	21 96       	adiw	r28, 0x01	; 1
 35a:	c8 30       	cpi	r28, 0x08	; 8
 35c:	d1 05       	cpc	r29, r1
 35e:	41 f7       	brne	.-48     	; 0x330 <yellow+0x1c>
	{
		for (i=0; i<y; i++)
			ws2812_sendarray((uint8_t *)&colors[0],3);		
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <red>:

void red()
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
	colors[0].r=255; colors[0].g=000; colors[0].b=000;
 36a:	e9 e0       	ldi	r30, 0x09	; 9
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	81 83       	std	Z+1, r24	; 0x01
 372:	10 82       	st	Z, r1
 374:	12 82       	std	Z+2, r1	; 0x02
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 376:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
}

void red()
{
	colors[0].r=255; colors[0].g=000; colors[0].b=000;
	for(int y=0; y<8; y++)
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
 37e:	14 c0       	rjmp	.+40     	; 0x3a8 <red+0x42>
	{
		for (i=0; i<y; i++)
 380:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
 384:	1c 16       	cp	r1, r28
 386:	1d 06       	cpc	r1, r29
 388:	7c f4       	brge	.+30     	; 0x3a8 <red+0x42>
		ws2812_sendarray((uint8_t *)&colors[0],3);
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	89 e0       	ldi	r24, 0x09	; 9
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_sendarray>
void red()
{
	colors[0].r=255; colors[0].g=000; colors[0].b=000;
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 396:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <i>
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <i>
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	8c 17       	cp	r24, r28
 3a4:	9d 07       	cpc	r25, r29
 3a6:	8c f3       	brlt	.-30     	; 0x38a <red+0x24>
}

void red()
{
	colors[0].r=255; colors[0].g=000; colors[0].b=000;
	for(int y=0; y<8; y++)
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	c8 30       	cpi	r28, 0x08	; 8
 3ac:	d1 05       	cpc	r29, r1
 3ae:	41 f7       	brne	.-48     	; 0x380 <red+0x1a>
	{
		for (i=0; i<y; i++)
		ws2812_sendarray((uint8_t *)&colors[0],3);
	}
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <green>:

void green()
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
	colors[0].r=000; colors[0].g=255; colors[0].b=000;
 3ba:	e9 e0       	ldi	r30, 0x09	; 9
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	11 82       	std	Z+1, r1	; 0x01
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 83       	st	Z, r24
 3c4:	12 82       	std	Z+2, r1	; 0x02
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 3c6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
}

void green()
{
	colors[0].r=000; colors[0].g=255; colors[0].b=000;
	for(int y=0; y<8; y++)
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <green+0x42>
	{
		for (i=0; i<y; i++)
 3d0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <i>
 3d4:	1c 16       	cp	r1, r28
 3d6:	1d 06       	cpc	r1, r29
 3d8:	7c f4       	brge	.+30     	; 0x3f8 <green+0x42>
		ws2812_sendarray((uint8_t *)&colors[0],3);
 3da:	63 e0       	ldi	r22, 0x03	; 3
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	89 e0       	ldi	r24, 0x09	; 9
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_sendarray>
void green()
{
	colors[0].r=000; colors[0].g=255; colors[0].b=000;
	for(int y=0; y<8; y++)
	{
		for (i=0; i<y; i++)
 3e6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <i>
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <i>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	8c 17       	cp	r24, r28
 3f4:	9d 07       	cpc	r25, r29
 3f6:	8c f3       	brlt	.-30     	; 0x3da <green+0x24>
}

void green()
{
	colors[0].r=000; colors[0].g=255; colors[0].b=000;
	for(int y=0; y<8; y++)
 3f8:	21 96       	adiw	r28, 0x01	; 1
 3fa:	c8 30       	cpi	r28, 0x08	; 8
 3fc:	d1 05       	cpc	r29, r1
 3fe:	41 f7       	brne	.-48     	; 0x3d0 <green+0x1a>
	{
		for (i=0; i<y; i++)
		ws2812_sendarray((uint8_t *)&colors[0],3);
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
